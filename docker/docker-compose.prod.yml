services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatcraftai-postgres-prod
    environment:
      POSTGRES_DB: chatcraftai
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatcraftai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatcraftai"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatcraftai-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - chatcraftai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API (Node.js + Prisma)
  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
      target: production # Use production stage
    container_name: chatcraftai-backend-prod
    env_file:
      - ../backend/.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/chatcraftai
      REDIS_URL: redis://redis:6379
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatcraftai-network
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: production # Use production stage
    container_name: chatcraftai-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: /api
      NEXT_PUBLIC_WS_URL: ws://localhost/ws
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - chatcraftai-network
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: chatcraftai-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - chatcraftai-network
    restart: unless-stopped
    tmpfs:
      - /tmp
      - /var/tmp
      - /var/cache/nginx
      - /var/run
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  chatcraftai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
