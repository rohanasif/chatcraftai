services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatcraftai-postgres
    environment:
      POSTGRES_DB: chatcraftai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatcraftai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatcraftai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatcraftai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - chatcraftai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API (Node.js + Prisma)
  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: chatcraftai-backend
    env_file:
      - ../backend/.env
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/chatcraftai
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    volumes:
      - ../backend:/app:cached # Bind mount for live code changes
      - /app/node_modules # Exclude node_modules from bind mount
      - /app/prisma # Exclude Prisma from bind mount
      - /app/dist # Exclude build output
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatcraftai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: development
    container_name: chatcraftai-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app:cached # Bind mount for live code changes
      - frontend_node_modules:/app/node_modules # Isolated node_modules
      - /app/.next # Exclude Next.js build cache
    depends_on:
      - backend
    networks:
      - chatcraftai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx (Production-only)
  nginx:
    image: nginx:alpine
    container_name: chatcraftai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - chatcraftai-network
    profiles: ["production"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_node_modules: # Persist backend node_modules
    driver: local
  frontend_node_modules: # Persist frontend node_modules
    driver: local

networks:
  chatcraftai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
