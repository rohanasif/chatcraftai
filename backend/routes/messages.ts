import express, { RequestHandler } from "express";
import { PrismaClient } from "@prisma/client";

const router = express.Router();
const prisma = new PrismaClient();

// Get messages for a conversation
const getMessagesHandler: RequestHandler = async (req, res) => {
  const { conversationId } = req.params;
  const { limit = 50, cursor } = req.query;

  try {
    const messages = await prisma.message.findMany({
      where: {
        conversationId,
        ...(cursor ? { id: { lt: cursor as string } } : {}),
      },
      include: {
        sender: {
          select: {
            id: true,
            name: true,
            avatar: true,
          },
        },
      },
      take: Number(limit),
      orderBy: {
        createdAt: "desc",
      },
    });

    res.json(messages.reverse()); // Return oldest first
  } catch (error) {
    console.error("Failed to fetch messages:", error);
    res.status(500).json({ error: "Failed to fetch messages" });
  }
};

// Get conversation analytics
const getAnalyticsHandler: RequestHandler = async (req, res) => {
  const { conversationId } = req.params;

  try {
    // Basic stats
    const messageCount = await prisma.message.count({
      where: { conversationId },
    });

    // Get all messages to calculate word count
    const messages = await prisma.message.findMany({
      where: { conversationId },
      select: { content: true },
    });

    // Calculate total word count
    const totalWords = messages.reduce((count, message) => {
      return count + (message.content?.split(/\s+/).length || 0);
    }, 0);

    // In a real implementation, you'd use the AI service for summary
    const summary = "Sample summary - would be generated by AI in production";

    res.json({
      summary,
      stats: {
        messageCount,
        wordCount: totalWords,
      },
    });
  } catch (error) {
    console.error("Failed to fetch analytics:", error);
    res.status(500).json({ error: "Failed to fetch analytics" });
  }
};

router.get("/:conversationId", getMessagesHandler);
router.get("/:conversationId/analytics", getAnalyticsHandler);

export default router;
